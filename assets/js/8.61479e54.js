(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{206:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"go-快速入门（一）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#go-快速入门（一）"}},[t._v("#")]),t._v(" Go 快速入门（一）")]),t._v(" "),s("h1",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("随着公司的业务发展，原先支撑起我们大部分业务的 PHP 技术栈已经不堪重负，所以我们逐渐引入了 Java 技术栈，帮我们解决了很多问题。")]),t._v(" "),s("p",[t._v("然而对于很多 PHP 程序员而言，Java 往往意味着替换而不是补充，转型之路又面临着陡峭的学习曲线，往往令人望而却步。")]),t._v(" "),s("p",[t._v("幸而，Golang 指出了另一条明路：上手简单、性能强大，而且可以跟 PHP 友好相处。")]),t._v(" "),s("p",[t._v("事实上，**业务就曾经在遇到高并发的业务时，用 Go 实现了部分低性能的 API ，有效地解决了业务压力；我们的**服务也通过用 Go 进行重写，替换了 PHP 版本，在减少了服务器资源的情况下，还极大地增加了系统的承载能力，有效地保障了上层业务的稳健运行。")]),t._v(" "),s("p",[t._v("在此，我邀请了负责咱们**服务的 "),s("code",[t._v("Kaisco")]),t._v(" 同学，为大家准备这个 Golang 的快速入门系列，计划用每周一篇的节奏，带着大家在 1 ~ 2 个月的时间里，不仅掌握 Go 语言的基础使用，还能"),s("strong",[t._v("实现一个 上万 TPS 的简化版 Redis")]),t._v(" 。")]),t._v(" "),s("p",[t._v("感兴趣吗？那就快点参与进来，还有，别忘了完成课后习题。（By 冯少）")]),t._v(" "),s("h2",{attrs:{id:"一、go语言环境安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、go语言环境安装"}},[t._v("#")]),t._v(" 一、Go语言环境安装")]),t._v(" "),s("h3",{attrs:{id:"_1、-安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、-安装"}},[t._v("#")]),t._v(" 1、 安装")]),t._v(" "),s("p",[t._v("根据操作系统到"),s("a",{attrs:{href:"https://golang.org/dl/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),s("OutboundLink")],1),t._v("或"),s("a",{attrs:{href:"https://golang.google.cn/dl/",target:"_blank",rel:"noopener noreferrer"}},[t._v("中国镜像"),s("OutboundLink")],1),t._v("下载安装包，并根据不同操作系统安装教程安装golang。注意区分自己的操作系统是32位还是64位。")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://golang.google.cn/doc/install#tarball",target:"_blank",rel:"noopener noreferrer"}},[t._v("Linux环境下安装"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://golang.google.cn/doc/install#macos",target:"_blank",rel:"noopener noreferrer"}},[t._v("MacOS环境下安装"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://golang.google.cn/doc/install#windows",target:"_blank",rel:"noopener noreferrer"}},[t._v("Windows环境下安装"),s("OutboundLink")],1)])]),t._v(" "),s("h3",{attrs:{id:"_2-、环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-、环境变量"}},[t._v("#")]),t._v(" 2.、环境变量")]),t._v(" "),s("h4",{attrs:{id:"_2-1、goroot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、goroot"}},[t._v("#")]),t._v(" 2.1、GOROOT")]),t._v(" "),s("p",[s("code",[t._v("Go1.10")]),t._v("版本引入了默认"),s("code",[t._v("GOROOT")]),t._v("，即开发者无需显式设置"),s("code",[t._v("GOROOT")]),t._v("环境变量。"),s("strong",[t._v("唯一要做的就是将安装目录下bin目录路径放置到PATH环境变量中。")])]),t._v(" "),s("ul",[s("li",[t._v("类Unix系统")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v(":go-install-dir/bin\n")])])]),s("ul",[s("li",[t._v("Windows")])]),t._v(" "),s("div",{staticClass:"language-powershell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-powershell"}},[s("code",[t._v("SETX "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"PATH"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%PATH%;go-install-dir/bin"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("M\n")])])]),s("h4",{attrs:{id:"_2-2、gopath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、gopath"}},[t._v("#")]),t._v(" 2.2、GOPATH")]),t._v(" "),s("p",[s("code",[t._v("GOPATH")]),t._v("环境变量指定工作区的位置，"),s("code",[t._v("GOPATH")]),t._v("可以是您系统上的任何目录，"),s("strong",[t._v("但是"),s("code",[t._v("GOPATH")]),t._v("该路径不能与Go安装相同")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("Go1.8")]),t._v("版本引入默认的"),s("code",[t._v("GOPATH")]),t._v("。在Linux/Mac系下，默认的"),s("code",[t._v("GOPATH")]),t._v("为$HOME/go，在Windows下，"),s("code",[t._v("GOPATH")]),t._v("默认路径为：%USERPROFILE%/go。")]),t._v(" "),s("p",[s("code",[t._v("GOPATH")]),t._v(" 下目录约定有三个子目录：")]),t._v(" "),s("div",{staticClass:"language-null extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("GOPATH\n\t- src 存放源代码(在该目录下进行开发)\n\t- pkg 编译后生成的文件\n\t- bin 编译后生成的可执行文件\n")])])]),s("p",[s("code",[t._v("GOPATH")]),t._v(" 中允许设置多个目录（但不常用），通常会将所有Go代码保存在一个"),s("code",[t._v("GOPATH")]),t._v("中。")]),t._v(" "),s("p",[t._v("此外，有些 IDE 可以给每个项目设立单独的 "),s("code",[t._v("GOPATH")]),t._v(" ，避免项目之间的依赖包出现冲突（类似PHP的composer或者Python的virtualenv）。")]),t._v(" "),s("h3",{attrs:{id:"_3、hello-world"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、hello-world"}},[t._v("#")]),t._v(" 3、Hello World")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $GOPATH/src/hello_world.go")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    fmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello world or 你好 世界 or 안녕 세상 or こんにちはせかい"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在"),s("code",[t._v("$GOPATH/src")]),t._v("目录下输入命令"),s("code",[t._v("go run hello_world.go")]),t._v("运行程序。")]),t._v(" "),s("p",[t._v("程序输出：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Hello world or 你好 世界 or 안녕 세상 or こんにちはせかい\n")])])]),s("h2",{attrs:{id:"二、go基础概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、go基础概念"}},[t._v("#")]),t._v(" 二、Go基础概念")]),t._v(" "),s("h3",{attrs:{id:"_1、关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、关键字"}},[t._v("#")]),t._v(" 1、关键字")]),t._v(" "),s("p",[s("code",[t._v("break")]),t._v("、"),s("code",[t._v("default")]),t._v("、"),s("code",[t._v("func")]),t._v("、"),s("code",[t._v("interface")]),t._v("、"),s("code",[t._v("select")]),t._v("、"),s("code",[t._v("case")]),t._v("、"),s("code",[t._v("defer")]),t._v("、"),s("code",[t._v("go")]),t._v("、"),s("code",[t._v("map")]),t._v("、"),s("code",[t._v("struct")]),t._v("、"),s("code",[t._v("chan")]),t._v("、"),s("code",[t._v("else")]),t._v("、"),s("code",[t._v("goto")]),t._v("、"),s("code",[t._v("package")]),t._v("、"),s("code",[t._v("switch")]),t._v("、"),s("code",[t._v("const")]),t._v("、"),s("code",[t._v("fallthrough")]),t._v("、"),s("code",[t._v("if")]),t._v("、"),s("code",[t._v("range")]),t._v("、"),s("code",[t._v("type")]),t._v("、"),s("code",[t._v("continue")]),t._v("、"),s("code",[t._v("for")]),t._v("、"),s("code",[t._v("import")]),t._v("、"),s("code",[t._v("return")]),t._v("、"),s("code",[t._v("var")])]),t._v(" "),s("h3",{attrs:{id:"_2、包（package）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、包（package）"}},[t._v("#")]),t._v(" 2、包（package）")]),t._v(" "),s("p",[t._v("Go使用"),s("code",[t._v("package")]),t._v("来组织代码。"),s("code",[t._v("package")]),t._v("的基本作用：模块化（能够把程序分成多个模块)和可重用性（每个模块都能被其它应用程序反复使用）。")]),t._v(" "),s("blockquote",[s("p",[t._v("每一个可独立运行的Go程序，必定包含一个"),s("code",[t._v("package main")]),t._v("，在这个"),s("code",[t._v("main")]),t._v("包中必定包含一个入口函数"),s("code",[t._v("main")]),t._v("，而这个函数既没有参数，也没有返回值。")])]),t._v(" "),s("h3",{attrs:{id:"_3、import"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、import"}},[t._v("#")]),t._v(" 3、import")]),t._v(" "),s("p",[t._v("Go代码的时候经常用到import这个命令用来导入包文件。")]),t._v(" "),s("p",[t._v("举例:")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n")])])]),s("p",[t._v("或者")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"math"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_4、可见性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、可见性"}},[t._v("#")]),t._v(" 4、可见性")]),t._v(" "),s("p",[t._v("当标识符（包括常量、变量、类型、函数名、结构字段等）以一个大写字母开头，那么使用这种形式的标识符可以被外部包的代码所使用，这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 private ）。")]),t._v(" "),s("p",[t._v("例如："),s("strong",[t._v("在 package test1 中定义两个方法 Foo 和 bar，在 test2 中只能调用 test1.Foo，无法调用 test1.bar.")])]),t._v(" "),s("h2",{attrs:{id:"三、go语言基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、go语言基础"}},[t._v("#")]),t._v(" 三、Go语言基础")]),t._v(" "),s("h3",{attrs:{id:"_1、数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、数据类型"}},[t._v("#")]),t._v(" 1、数据类型")]),t._v(" "),s("p",[t._v("bool、rune、int8、 int16、int32、int64、byte、uint8、uint16、uint32、uint64、float32、float64、string、"),s("strong",[t._v("error")]),t._v("(内置"),s("code",[t._v("error")]),t._v("类型，专门用来处理错误信息)等等基本数据类型。")]),t._v(" "),s("h3",{attrs:{id:"_2、变量、常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、变量、常量"}},[t._v("#")]),t._v(" 2、变量、常量")]),t._v(" "),s("h4",{attrs:{id:"_2-1、变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、变量"}},[t._v("#")]),t._v(" 2.1、变量")]),t._v(" "),s("p",[t._v("Go语言里面定义变量有多种方式。")]),t._v(" "),s("p",[s("code",[t._v("var")]),t._v("关键字是Go最基本的定义变量方式，Go把变量类型放在变量名后面：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//定义一个名称为“variableName”，类型为"type"的变量')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" variableName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义变量并初始化值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" variableName "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//定义三个类型都是“type”的变量")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname3 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 定义三个类型都是"type"的变量,并且分别初始化为相应的值vname1为v1，vname2为v2，vname3为v3')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname3 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v3\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义三个变量，它们分别初始化为相应的值vname1为v1，vname2为v2，vname3为v3。然后Go会根据其相应值的类型来决定变量的基本数据类型")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vname1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v3\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者使用`简短声明`方式")]),t._v("\nvname1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("vname3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" v1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v3\n")])])]),s("ul",[s("li",[s("p",[s("strong",[t._v("简短声明有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用"),s("code",[t._v("var")]),t._v("方式来定义全局变量。")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Go对于已声明但未使用的变量会在编译阶段报错")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("_")]),t._v("（下划线）是个特殊的变量名，任何赋予它的值都会被丢弃。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("34")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("35")]),t._v("\n")])])])])]),t._v(" "),s("h4",{attrs:{id:"_2-2、常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、常量"}},[t._v("#")]),t._v(" 2.2、常量")]),t._v(" "),s("p",[t._v("常量就是在程序编译阶段就确定下来的值，而程序在运行时无法改变该值。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" constantName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果需要，也可以明确指定常量的类型：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Pi "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415926")]),t._v("\n")])])]),s("h4",{attrs:{id:"_2-3、分组声明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、分组声明"}},[t._v("#")]),t._v(" 2.3、分组声明")]),t._v(" "),s("p",[t._v("在Go语言中，同时声明多个常量、变量，或者导入多个包时，可采用分组的方式进行声明。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"os"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\n    pi "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.1415")]),t._v("\n    prefix "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Go_"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n    pi "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("float32")]),t._v("\n    prefix "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3、slice、map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、slice、map"}},[t._v("#")]),t._v(" 3、slice、map")]),t._v(" "),s("h4",{attrs:{id:"_3-1、slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、slice"}},[t._v("#")]),t._v(" 3.1、slice")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("定义方式")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 和声明array一样，只是少了长度")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fslice "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化数据")]),t._v("\nslice "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("slice")]),t._v("可以从一个数组或一个已经存在的"),s("code",[t._v("slice")]),t._v("中再次声明。"),s("code",[t._v("slice")]),t._v("通过"),s("code",[t._v("array[i:j]")]),t._v("来获取，其中"),s("code",[t._v("i")]),t._v("是数组的开始位置，"),s("code",[t._v("j")]),t._v("是结束位置，但不包含"),s("code",[t._v("array[j]")]),t._v("，它的长度是"),s("code",[t._v("j-i")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个含有10个元素元素类型为byte的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ar "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'f'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'g'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'h'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'j'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明两个含有byte的slice")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a指向数组的第3个元素开始，并到第五个元素结束，")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//现在a含有的元素: ar[2]、ar[3]和ar[4]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b是数组ar的另一个slice")]),t._v("\nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b的元素是：ar[3]和ar[4]")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意"),s("code",[t._v("slice")]),t._v("和数组在声明时的区别：声明数组时，方括号内写明了数组的长度或使用"),s("code",[t._v("...")]),t._v("自动计算长度，而声明"),s("code",[t._v("slice")]),t._v("时，方括号内没有任何字符。")])])]),t._v(" "),s("li",[s("p",[t._v("slice简便的操作")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("slice")]),t._v("的默认开始位置是0，"),s("code",[t._v("ar[:n]")]),t._v("等价于"),s("code",[t._v("ar[0:n]")])]),t._v(" "),s("li",[s("code",[t._v("slice")]),t._v("的第二个序列默认是"),s("code",[t._v("slice")]),t._v("的长度，"),s("code",[t._v("ar[n:]")]),t._v("等价于"),s("code",[t._v("ar[n:len(ar)]")])]),t._v(" "),s("li",[t._v("如果从一个数组里面直接获取"),s("code",[t._v("slice")]),t._v("，可以这样"),s("code",[t._v("ar[:]")]),t._v("，因为默认第一个序列是0，第二个是数组的长度，即等价于"),s("code",[t._v("ar[0:len(ar)]")])])])]),t._v(" "),s("li",[s("p",[t._v("``slice`有几个有用的内置函数")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("len")]),t._v(" 获取"),s("code",[t._v("slice")]),t._v("的长度")]),t._v(" "),s("li",[s("code",[t._v("cap")]),t._v(" 获取"),s("code",[t._v("slice")]),t._v("的最大容量")]),t._v(" "),s("li",[s("code",[t._v("append")]),t._v(" 向"),s("code",[t._v("slice")]),t._v("里面追加一个或者多个元素，然后返回一个和"),s("code",[t._v("slice")]),t._v("一样类型的"),s("code",[t._v("slice")])]),t._v(" "),s("li",[s("code",[t._v("copy")]),t._v(" 函数"),s("code",[t._v("copy")]),t._v("从源"),s("code",[t._v("slice")]),t._v("的"),s("code",[t._v("src")]),t._v("中复制元素到目标"),s("code",[t._v("dst")]),t._v("，并且返回复制的元素的个数")])])])]),t._v(" "),s("h4",{attrs:{id:"_3-2、map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、map"}},[t._v("#")]),t._v(" 3.2、map")]),t._v(" "),s("p",[s("code",[t._v("map")]),t._v("的格式为"),s("code",[t._v("map[keyType]valueType")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('// 声明一个key是字符串，值为int的字典,这种方式的声明需要在使用之前使用make初始化\nvar numbers map[string]int\n\n// 另一种map的声明方式\nnumbers := make(map[string]int)\nnumbers["one"] = 1  //赋值\nnumbers["ten"] = 10 //赋值\nnumbers["three"] = 3\n\nfmt.Println("第三个数字是: ", numbers["three"]) // 读取数据\n// 打印出来如:第三个数字是: 3\n\n// 通过delete删除map的元素\ndelete(numbers, "ten")  // 删除key为ten的元素\n\n// 判断map是否存在某个元素\nif _, ok := numbers["four"]; ok {\n\t// ok 为true即存在\n}\n')])])]),s("ul",[s("li",[s("code",[t._v("map")]),t._v("是无序的，每次打印出来的"),s("code",[t._v("map")]),t._v("都会不一样，它不能通过"),s("code",[t._v("index")]),t._v("获取，而必须通过"),s("code",[t._v("key")]),t._v("获取")]),t._v(" "),s("li",[s("code",[t._v("map")]),t._v("的长度是不固定的，也就是和"),s("code",[t._v("slice")]),t._v("一样，也是一种引用类型")]),t._v(" "),s("li",[t._v("内置的"),s("code",[t._v("len")]),t._v("函数同样适用于"),s("code",[t._v("map")]),t._v("，返回"),s("code",[t._v("map")]),t._v("拥有的"),s("code",[t._v("key")]),t._v("的数量")]),t._v(" "),s("li",[s("code",[t._v("map")]),t._v("和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制")])]),t._v(" "),s("h4",{attrs:{id:"_3-3、make、new操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、make、new操作"}},[t._v("#")]),t._v(" 3.3、make、new操作")]),t._v(" "),s("p",[s("code",[t._v("make")]),t._v("用于内建类型（"),s("code",[t._v("map")]),t._v("、"),s("code",[t._v("slice")]),t._v(" 和"),s("code",[t._v("channel")]),t._v("）的内存分配。"),s("code",[t._v("new")]),t._v("用于各种类型的内存分配。")]),t._v(" "),s("h3",{attrs:{id:"_4、函数和流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、函数和流程"}},[t._v("#")]),t._v(" 4、函数和流程")]),t._v(" "),s("h4",{attrs:{id:"_4-1、函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1、函数"}},[t._v("#")]),t._v(" 4.1、函数")]),t._v(" "),s("p",[t._v("函数使用关键字func来声明。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("funcName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("input1 type1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" input2 type2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("output1 type1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" output2 type2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里是处理逻辑代码")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回多个值")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value2\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("关键字"),s("code",[t._v("func")]),t._v("用来声明一个函数"),s("code",[t._v("funcName")])]),t._v(" "),s("li",[t._v("函数可以有一个或者多个参数，每个参数后面带有类型，通过"),s("code",[t._v(",")]),t._v("分隔")]),t._v(" "),s("li",[t._v("函数可以返回多个值")]),t._v(" "),s("li",[t._v("上面返回值声明了两个变量"),s("code",[t._v("output1")]),t._v("和"),s("code",[t._v("output2")]),t._v("，如果你不想声明也可以，直接就两个类型")]),t._v(" "),s("li",[t._v("如果只有一个返回值且不声明返回值变量，那么你可以省略 包括返回值 的括号")]),t._v(" "),s("li",[t._v("如果没有返回值，那么就直接省略最后的返回信息")]),t._v(" "),s("li",[t._v("如果有返回值， 那么必须在函数的外层添加return语句")])]),t._v(" "),s("p",[t._v("Go函数支持变参。接受变参的函数是有着不定数量的参数的。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myfunc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("strong",[t._v("defer")])]),t._v(" "),s("p",[t._v("Go语言中有种不错的设计，即延迟（defer）语句，可以在函数中添加多个defer语句。当函数执行到最后时，这些defer语句会按照逆序执行，最后该函数返回。")]),t._v(" "),s("p",[s("strong",[t._v("init函数")])]),t._v(" "),s("p",[t._v("Go里面有两个保留的函数："),s("code",[t._v("init")]),t._v("函数（能够应用于所有的"),s("code",[t._v("package")]),t._v("）和"),s("code",[t._v("main")]),t._v("函数（只能应用于"),s("code",[t._v("package main")]),t._v("）。这两个函数在定义时不能有任何的参数和返回值。虽然一个"),s("code",[t._v("package")]),t._v("里面可以写任意多个"),s("code",[t._v("init")]),t._v("函数，但这无论是对于可读性还是以后的可维护性来说，我们都强烈建议用户在一个"),s("code",[t._v("package")]),t._v("中每个文件只写一个"),s("code",[t._v("init")]),t._v("函数。")]),t._v(" "),s("p",[t._v("Go程序会自动调用"),s("code",[t._v("init()")]),t._v("和"),s("code",[t._v("main()")]),t._v("，所以你不需要在任何地方调用这两个函数。每个"),s("code",[t._v("package")]),t._v("中的"),s("code",[t._v("init")]),t._v("函数都是可选的，但"),s("code",[t._v("package main")]),t._v("就必须包含一个"),s("code",[t._v("main")]),t._v("函数。")]),t._v(" "),s("h4",{attrs:{id:"_4-2、流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2、流程"}},[t._v("#")]),t._v(" 4.2、流程")]),t._v(" "),s("h4",{attrs:{id:"_4-2-1、if"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-1、if"}},[t._v("#")]),t._v(" 4.2.1、if")]),t._v(" "),s("p",[t._v("Go里面"),s("code",[t._v("if")]),t._v("条件判断语句中不需要括号。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用法一")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用法二")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用法三")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computedValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),s("h4",{attrs:{id:"_4-2-2、for"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-2、for"}},[t._v("#")]),t._v(" 4.2.2、for")]),t._v(" "),s("p",[t._v("Go里面最强大的一个控制逻辑就是"),s("code",[t._v("for")]),t._v("，它即可以用来循环读取数据，又可以当作"),s("code",[t._v("while")]),t._v("来控制逻辑，还能迭代操作。它的语法如下：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" expression1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" expression2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" expression3 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("for循环作为其它语言while语句：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" expression "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("for")]),t._v("配合"),s("code",[t._v("range")]),t._v("可以用于读取"),s("code",[t._v("slice")]),t._v("和"),s("code",[t._v("map")]),t._v("的数据：")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("v"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("map")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h1",{attrs:{id:"本章试练"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本章试练"}},[t._v("#")]),t._v(" 本章试练")]),t._v(" "),s("ul",[s("li",[t._v("安装"),s("code",[t._v("Go")]),t._v("环境，实现hello world并编译运行")]),t._v(" "),s("li",[t._v("用牛顿法实现平方根函数 - "),s("a",{attrs:{href:"https://leetcode-cn.com/problems/sqrtx/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 题目地址"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("实现一个"),s("code",[t._v("fibonacci")]),t._v(" 函数，返回一个数列的迭代器（一个函数），每次调用这个迭代器函数，都会返回该数列的下一个元素。"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97",target:"_blank",rel:"noopener noreferrer"}},[t._v("斐波纳契数列"),s("OutboundLink")],1),t._v(" "),s("code",[t._v("(0, 1, 1, 2, 3, 5, ...)")]),t._v(" - "),s("a",{attrs:{href:"https://tour.go-zh.org/moretypes/26",target:"_blank",rel:"noopener noreferrer"}},[t._v("查看答案"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("给定一个单词列表，只返回可以使用在键盘同一行的字母打印出来的单词"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/keyboard-row/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 题目地址"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("给定一个整数，将其转化为7进制，并以字符串形式输出"),s("a",{attrs:{href:"https://leetcode-cn.com/problems/base-7/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode 题目地址"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);