(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{212:function(t,s,o){"use strict";o.r(s);var e=o(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,o=t._self._c||s;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"go-快速入门（三）-goroutine"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#go-快速入门（三）-goroutine"}},[t._v("#")]),t._v(" Go 快速入门（三）- goroutine")]),t._v(" "),o("h2",{attrs:{id:"本章学习目标"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#本章学习目标"}},[t._v("#")]),t._v(" 本章学习目标")]),t._v(" "),o("p",[o("code",[t._v("go")]),t._v("语言有着较高的开发效率，提供了海量并行的支持。听说过"),o("code",[t._v("go")]),t._v("语言的小伙伴应该都听说过这些特性。我们已经在前面章节体验到了使用"),o("code",[t._v("go")]),t._v("语言开发的便捷性。这一章节，我们来了解"),o("code",[t._v("go")]),t._v("语言并发利器"),o("code",[t._v("goroutine")]),t._v("。")]),t._v(" "),o("h2",{attrs:{id:"一、什么是goroutine"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是goroutine"}},[t._v("#")]),t._v(" 一、什么是goroutine")]),t._v(" "),o("p",[t._v("在了解"),o("code",[t._v("goroutine")]),t._v("之前，我们先简单了解一下进程与线程。")]),t._v(" "),o("h3",{attrs:{id:"_1、进程与线程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1、进程与线程"}},[t._v("#")]),t._v(" 1、进程与线程")]),t._v(" "),o("p",[t._v("进程是资源分配的最小单位，线程是程序执行的最小单位。")]),t._v(" "),o("p",[t._v("进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种系统操作非常昂贵。而线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。")]),t._v(" "),o("p",[t._v("直白地讲，进程就是应用程序的启动实例。比如我们运行一个游戏，打开一个软件，就是开启了一个进程。进程拥有代码和打开的文件资源、数据资源、独立的内存空间。线程从属于进程，是程序的实际执行者。一个进程至少包含一个主线程，也可以有更多的子线程。")]),t._v(" "),o("p",[t._v("这儿有一篇能够让大家形象理解进程与线程关系的文章（"),o("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("进程与线程的一个简单解释"),o("OutboundLink")],1),t._v("），更多进程、线程知识大家自行了解啦。")]),t._v(" "),o("h3",{attrs:{id:"_2、goroutine就是协程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2、goroutine就是协程"}},[t._v("#")]),t._v(" 2、goroutine就是协程?")]),t._v(" "),o("p",[t._v("我们先来看看什么是协程。")]),t._v(" "),o("p",[t._v("协程（"),o("code",[t._v("coroutines")]),t._v("）是一种协作任务控制机制，是一种比线程更加轻量级的存在。最重要的是，协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）。协程的概念提出时间其实比线程还要早，不过是这几年才被大家熟知。")]),t._v(" "),o("p",[t._v("用生产者/消费者模式举例。创建一个消费者协程，并且在主线程中生产数据，协程中消费数据。当协程执行到需要生产数据地方时会暂停，等到主线程生产数据后，协程才会接到数据继续执行。但是，协程暂停和线程的阻塞是有本质区别的。协程的暂停完全由程序控制，线程的阻塞状态是由操作系统内核来进行切换。")]),t._v(" "),o("p",[t._v("本质上，"),o("code",[t._v("goroutine")]),t._v(" 就是协程。 不同的是，"),o("code",[t._v("go")]),t._v("在 runtime、系统调用等多方面对"),o("code",[t._v("goroutine")]),t._v("调度进行了封装和处理，当遇到长时间执行或者进行系统调用时，会主动把当前 "),o("code",[t._v("goroutine")]),t._v("的CPU (P) 转让出去，让其他 "),o("code",[t._v("goroutine")]),t._v(" 能被调度并执行，也就是 "),o("code",[t._v("go")]),t._v(" 从语言层面支持了协程。")]),t._v(" "),o("p",[t._v("个人理解，"),o("code",[t._v("goroutine")]),t._v("实现了协程（"),o("code",[t._v("coroutines")]),t._v("）这一协作任务控制机制。")]),t._v(" "),o("h2",{attrs:{id:"二、goroutine调度机制"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#二、goroutine调度机制"}},[t._v("#")]),t._v(" 二、goroutine调度机制")]),t._v(" "),o("p",[t._v("要理解协程的实现,，首先需要了解go中的三个非常重要的概念，它们分别是"),o("strong",[t._v("G")]),t._v("、 "),o("strong",[t._v("M")]),t._v("和"),o("strong",[t._v("P")]),t._v("。这三项是协程最主要的组成部分， 它们在"),o("code",[t._v("go")]),t._v("的源代码中无处不在。")]),t._v(" "),o("h3",{attrs:{id:"_1、g-goroutine"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_1、g-goroutine"}},[t._v("#")]),t._v(" 1、G (goroutine)")]),t._v(" "),o("p",[t._v("G是"),o("code",[t._v("goroutine")]),t._v("的首字母，"),o("code",[t._v("goroutine")]),t._v("可以解释为受管理的轻量线程，"),o("code",[t._v("goroutine")]),t._v("使用"),o("code",[t._v("go")]),t._v("关键词创建。存储了"),o("code",[t._v("goroutine")]),t._v("的执行stack信息、"),o("code",[t._v("goroutine")]),t._v("状态以及"),o("code",[t._v("goroutine")]),t._v("的任务函数等；")]),t._v(" "),o("h3",{attrs:{id:"_2、m-machine"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_2、m-machine"}},[t._v("#")]),t._v(" 2、M (machine)")]),t._v(" "),o("p",[t._v("M是machine的首字母，基本"),o("strong",[t._v("等同于系统线程")]),t._v("。M会从运行队列中取出G， 然后运行G， 如果G运行完毕或者进入休眠状态，则从运行队列中取出下一个G运行， 周而复始。")]),t._v(" "),o("h3",{attrs:{id:"_3、p-process"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_3、p-process"}},[t._v("#")]),t._v(" 3、P (process)")]),t._v(" "),o("p",[t._v("P是"),o("code",[t._v("process")]),t._v("的首字母，代表逻辑处理器。即M运行G所需要的资源。P也可以理解为控制"),o("code",[t._v("go")]),t._v("代码的并行度的机制。P的数量决定了系统内最大可并行的G的数量（前提：系统的物理cpu核数>=P的数量）。")]),t._v(" "),o("h3",{attrs:{id:"_4、调度流程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#_4、调度流程"}},[t._v("#")]),t._v(" 4、调度流程")]),t._v(" "),o("p",[t._v("当通过"),o("code",[t._v("go")]),t._v("关键字创建一个新的"),o("code",[t._v("goroutine")]),t._v("的时候，它会优先被放入P的本地队列。为了运行"),o("code",[t._v("goroutine")]),t._v("，M需要持有（绑定）一个P，接着M会启动一个OS线程，循环从P的本地队列里取出一个"),o("code",[t._v("goroutine")]),t._v("并执行。")]),t._v(" "),o("p",[t._v("上面介绍的"),o("code",[t._v("goroutine")]),t._v("调度流程只是简化版流程。"),o("code",[t._v("work-stealing")]),t._v("调度算法、"),o("code",[t._v("goroutine")]),t._v("的阻塞/唤醒、系统调用阻塞、大规模"),o("code",[t._v("goroutine")]),t._v("瓶颈等等问题都是"),o("code",[t._v("goroutine")]),t._v("调度过程中具体问题。欢迎感兴趣的小伙伴们一起来探讨。")]),t._v(" "),o("h2",{attrs:{id:"三、goroutine使用"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#三、goroutine使用"}},[t._v("#")]),t._v(" 三、goroutine使用")]),t._v(" "),o("p",[o("code",[t._v("goroutine")]),t._v("是Go并行设计的核心。"),o("code",[t._v("goroutine")]),t._v("说到底其实就是线程，但是它比线程更小，十几个"),o("code",[t._v("goroutine")]),t._v("可能体现在底层就是五六个线程，Go语言内部帮我们实现了这些"),o("code",[t._v("goroutine")]),t._v("之间的内存共享。执行"),o("code",[t._v("goroutine")]),t._v("只需极少的栈内存。也正因为如此，可同时运行成千上万个并发任务。"),o("code",[t._v("goroutine")]),t._v("比线程更易用、更高效、更轻便。")]),t._v(" "),o("p",[o("code",[t._v("goroutine")]),t._v("是通过"),o("code",[t._v("go")]),t._v("的runtime管理的一个线程管理器。"),o("code",[t._v("goroutine")]),t._v("通过"),o("code",[t._v("go")]),t._v("关键字实现了，其实就是一个普通的函数。")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[t._v("go hello(a, b, c)\n")])])]),o("p",[t._v("通过关键字go就启动了一个goroutine。我们来看一个例子")]),t._v(" "),o("div",{staticClass:"language-go extra-class"},[o("pre",{pre:!0,attrs:{class:"language-go"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"runtime"')]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),o("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        runtime"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("Gosched")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CPU把时间片让给别人,下次某个时候继续恢复执行该goroutine")]),t._v("\n        fmt"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("go")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 开一个新的Goroutines执行")]),t._v("\n    "),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前Goroutines执行")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以上程序执行后将输出：")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// world")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// world")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// world")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// world")]),t._v("\n"),o("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello")]),t._v("\n")])])]),o("p",[t._v("我们可以看到"),o("code",[t._v("go")]),t._v("关键字很方便的就实现了并发编程。 上面的多个"),o("code",[t._v("goroutine")]),t._v("运行在同一个进程里面，共享内存数据，不过设计上我们要遵循：不通过共享来通信，而要通过通信来共享。后面章节我们会讲解如何通过通信来共享 。")]),t._v(" "),o("h1",{attrs:{id:"本章试练"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#本章试练"}},[t._v("#")]),t._v(" 本章试练")]),t._v(" "),o("ul",[o("li",[o("a",{attrs:{href:"https://tour.go-zh.org/concurrency/10",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用 Go 的并发特性来实现一个 Web 爬虫"),o("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=n.exports}}]);